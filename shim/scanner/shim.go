
// Code generated by tools/gen_shims. DO NOT EDIT.

package scanner

import "github.com/microsoft/typescript-go/internal/ast"
import "github.com/microsoft/typescript-go/internal/core"
import "github.com/microsoft/typescript-go/internal/scanner"
import "iter"
import _ "unsafe"

//go:linkname ComputeLineOfPosition github.com/microsoft/typescript-go/internal/scanner.ComputeLineOfPosition
func ComputeLineOfPosition(lineStarts []core.TextPos, pos int) int
//go:linkname ComputePositionOfLineAndCharacter github.com/microsoft/typescript-go/internal/scanner.ComputePositionOfLineAndCharacter
func ComputePositionOfLineAndCharacter(lineStarts []core.TextPos, line int, character int) int
//go:linkname DeclarationNameToString github.com/microsoft/typescript-go/internal/scanner.DeclarationNameToString
func DeclarationNameToString(name *ast.Node) string
type ErrorCallback = scanner.ErrorCallback
type EscapeSequenceScanningFlags = scanner.EscapeSequenceScanningFlags
const EscapeSequenceScanningFlagsAllowExtendedUnicodeEscape = scanner.EscapeSequenceScanningFlagsAllowExtendedUnicodeEscape
const EscapeSequenceScanningFlagsAnnexB = scanner.EscapeSequenceScanningFlagsAnnexB
const EscapeSequenceScanningFlagsAnyUnicodeMode = scanner.EscapeSequenceScanningFlagsAnyUnicodeMode
const EscapeSequenceScanningFlagsAtomEscape = scanner.EscapeSequenceScanningFlagsAtomEscape
const EscapeSequenceScanningFlagsRegularExpression = scanner.EscapeSequenceScanningFlagsRegularExpression
const EscapeSequenceScanningFlagsReportErrors = scanner.EscapeSequenceScanningFlagsReportErrors
const EscapeSequenceScanningFlagsReportInvalidEscapeErrors = scanner.EscapeSequenceScanningFlagsReportInvalidEscapeErrors
const EscapeSequenceScanningFlagsString = scanner.EscapeSequenceScanningFlagsString
//go:linkname GetEndLinePosition github.com/microsoft/typescript-go/internal/scanner.GetEndLinePosition
func GetEndLinePosition(sourceFile *ast.SourceFile, line int) int
//go:linkname GetIdentifierToken github.com/microsoft/typescript-go/internal/scanner.GetIdentifierToken
func GetIdentifierToken(str string) ast.Kind
//go:linkname GetLeadingCommentRanges github.com/microsoft/typescript-go/internal/scanner.GetLeadingCommentRanges
func GetLeadingCommentRanges(f *ast.NodeFactory, text string, pos int) iter.Seq[ast.CommentRange]
//go:linkname GetLineAndCharacterOfPosition github.com/microsoft/typescript-go/internal/scanner.GetLineAndCharacterOfPosition
func GetLineAndCharacterOfPosition(sourceFile *ast.SourceFile, pos int) (line int, character int)
//go:linkname GetLineStarts github.com/microsoft/typescript-go/internal/scanner.GetLineStarts
func GetLineStarts(sourceFile *ast.SourceFile) []core.TextPos
//go:linkname GetPositionOfLineAndCharacter github.com/microsoft/typescript-go/internal/scanner.GetPositionOfLineAndCharacter
func GetPositionOfLineAndCharacter(sourceFile *ast.SourceFile, line int, character int) int
//go:linkname GetRangeOfTokenAtPosition github.com/microsoft/typescript-go/internal/scanner.GetRangeOfTokenAtPosition
func GetRangeOfTokenAtPosition(sourceFile *ast.SourceFile, pos int) core.TextRange
//go:linkname GetScannerForSourceFile github.com/microsoft/typescript-go/internal/scanner.GetScannerForSourceFile
func GetScannerForSourceFile(sourceFile *ast.SourceFile, pos int) *scanner.Scanner
//go:linkname GetSourceTextOfNodeFromSourceFile github.com/microsoft/typescript-go/internal/scanner.GetSourceTextOfNodeFromSourceFile
func GetSourceTextOfNodeFromSourceFile(sourceFile *ast.SourceFile, node *ast.Node, includeTrivia bool) string
//go:linkname GetTextOfNode github.com/microsoft/typescript-go/internal/scanner.GetTextOfNode
func GetTextOfNode(node *ast.Node) string
//go:linkname GetTextOfNodeFromSourceText github.com/microsoft/typescript-go/internal/scanner.GetTextOfNodeFromSourceText
func GetTextOfNodeFromSourceText(sourceText string, node *ast.Node, includeTrivia bool) string
//go:linkname GetTokenPosOfNode github.com/microsoft/typescript-go/internal/scanner.GetTokenPosOfNode
func GetTokenPosOfNode(node *ast.Node, sourceFile *ast.SourceFile, includeJSDoc bool) int
//go:linkname GetTrailingCommentRanges github.com/microsoft/typescript-go/internal/scanner.GetTrailingCommentRanges
func GetTrailingCommentRanges(f *ast.NodeFactory, text string, pos int) iter.Seq[ast.CommentRange]
//go:linkname GetViableKeywordSuggestions github.com/microsoft/typescript-go/internal/scanner.GetViableKeywordSuggestions
func GetViableKeywordSuggestions() []string
//go:linkname IdentifierToKeywordKind github.com/microsoft/typescript-go/internal/scanner.IdentifierToKeywordKind
func IdentifierToKeywordKind(node *ast.Identifier) ast.Kind
//go:linkname IsIdentifierText github.com/microsoft/typescript-go/internal/scanner.IsIdentifierText
func IsIdentifierText(name string, languageVersion core.ScriptTarget) bool
//go:linkname IsValidIdentifier github.com/microsoft/typescript-go/internal/scanner.IsValidIdentifier
func IsValidIdentifier(s string, languageVersion core.ScriptTarget) bool
type JSDocParsingMode = scanner.JSDocParsingMode
const JSDocParsingModeParseAll = scanner.JSDocParsingModeParseAll
const JSDocParsingModeParseForTypeErrors = scanner.JSDocParsingModeParseForTypeErrors
const JSDocParsingModeParseForTypeInfo = scanner.JSDocParsingModeParseForTypeInfo
const JSDocParsingModeParseNone = scanner.JSDocParsingModeParseNone
//go:linkname NewScanner github.com/microsoft/typescript-go/internal/scanner.NewScanner
func NewScanner() *scanner.Scanner
//go:linkname ScanTokenAtPosition github.com/microsoft/typescript-go/internal/scanner.ScanTokenAtPosition
func ScanTokenAtPosition(sourceFile *ast.SourceFile, pos int) ast.Kind
type Scanner = scanner.Scanner
type ScannerState = scanner.ScannerState
//go:linkname SkipTrivia github.com/microsoft/typescript-go/internal/scanner.SkipTrivia
func SkipTrivia(text string, pos int) int
//go:linkname SkipTriviaEx github.com/microsoft/typescript-go/internal/scanner.SkipTriviaEx
func SkipTriviaEx(text string, pos int, options *scanner.SkipTriviaOptions) int
type SkipTriviaOptions = scanner.SkipTriviaOptions
//go:linkname TokenToString github.com/microsoft/typescript-go/internal/scanner.TokenToString
func TokenToString(token ast.Kind) string
