
// Code generated by tools/gen_shims. DO NOT EDIT.

package tsoptions

import "github.com/microsoft/typescript-go/internal/ast"
import "github.com/microsoft/typescript-go/internal/core"
import "github.com/microsoft/typescript-go/internal/tsoptions"
import "github.com/microsoft/typescript-go/internal/tspath"
import _ "unsafe"

type AlternateModeDiagnostics = tsoptions.AlternateModeDiagnostics
var BuildNameMap = tsoptions.BuildNameMap
var BuildOpts = tsoptions.BuildOpts
type CommandLineOption = tsoptions.CommandLineOption
type CommandLineOptionKind = tsoptions.CommandLineOptionKind
const CommandLineOptionTypeBoolean = tsoptions.CommandLineOptionTypeBoolean
const CommandLineOptionTypeEnum = tsoptions.CommandLineOptionTypeEnum
const CommandLineOptionTypeList = tsoptions.CommandLineOptionTypeList
const CommandLineOptionTypeListOrElement = tsoptions.CommandLineOptionTypeListOrElement
const CommandLineOptionTypeNumber = tsoptions.CommandLineOptionTypeNumber
const CommandLineOptionTypeObject = tsoptions.CommandLineOptionTypeObject
const CommandLineOptionTypeString = tsoptions.CommandLineOptionTypeString
var CompilerNameMap = tsoptions.CompilerNameMap
var CompilerOptionsDidYouMeanDiagnostics = tsoptions.CompilerOptionsDidYouMeanDiagnostics
type CompilerOptionsValue = tsoptions.CompilerOptionsValue
type DidYouMeanOptionsDiagnostics = tsoptions.DidYouMeanOptionsDiagnostics
type ExtendedConfigCacheEntry = tsoptions.ExtendedConfigCacheEntry
type FileMatcherPatterns = tsoptions.FileMatcherPatterns
//go:linkname GetDefaultLibFileName github.com/microsoft/typescript-go/internal/tsoptions.GetDefaultLibFileName
func GetDefaultLibFileName(options *core.CompilerOptions) string
//go:linkname GetLibFileName github.com/microsoft/typescript-go/internal/tsoptions.GetLibFileName
func GetLibFileName(libName string) (string, bool)
//go:linkname GetNameMapFromList github.com/microsoft/typescript-go/internal/tsoptions.GetNameMapFromList
func GetNameMapFromList(optDecls []*tsoptions.CommandLineOption) *tsoptions.NameMap
//go:linkname GetSupportedExtensions github.com/microsoft/typescript-go/internal/tsoptions.GetSupportedExtensions
func GetSupportedExtensions(options *core.CompilerOptions, extraFileExtensions []tsoptions.fileExtensionInfo) [][]string
//go:linkname GetSupportedExtensionsWithJsonIfResolveJsonModule github.com/microsoft/typescript-go/internal/tsoptions.GetSupportedExtensionsWithJsonIfResolveJsonModule
func GetSupportedExtensionsWithJsonIfResolveJsonModule(options *core.CompilerOptions, supportedExtensions [][]string) [][]string
var LibFilesSet = tsoptions.LibFilesSet
var Libs = tsoptions.Libs
type NameMap = tsoptions.NameMap
//go:linkname NewTsconfigSourceFileFromFilePath github.com/microsoft/typescript-go/internal/tsoptions.NewTsconfigSourceFileFromFilePath
func NewTsconfigSourceFileFromFilePath(configFileName string, configPath tspath.Path, configSourceText string) *tsoptions.TsConfigSourceFile
var OptionsDeclarations = tsoptions.OptionsDeclarations
//go:linkname ParseCommandLine github.com/microsoft/typescript-go/internal/tsoptions.ParseCommandLine
func ParseCommandLine(commandLine []string, host tsoptions.ParseConfigHost) *tsoptions.ParsedCommandLine
type ParseCommandLineWorkerDiagnostics = tsoptions.ParseCommandLineWorkerDiagnostics
//go:linkname ParseCompilerOptions github.com/microsoft/typescript-go/internal/tsoptions.ParseCompilerOptions
func ParseCompilerOptions(key string, value any, allOptions *core.CompilerOptions) []*ast.Diagnostic
//go:linkname ParseConfigFileTextToJson github.com/microsoft/typescript-go/internal/tsoptions.ParseConfigFileTextToJson
func ParseConfigFileTextToJson(fileName string, path tspath.Path, jsonText string) (any, []*ast.Diagnostic)
type ParseConfigHost = tsoptions.ParseConfigHost
//go:linkname ParseJsonConfigFileContent github.com/microsoft/typescript-go/internal/tsoptions.ParseJsonConfigFileContent
func ParseJsonConfigFileContent(json any, host tsoptions.ParseConfigHost, basePath string, existingOptions *core.CompilerOptions, configFileName string, resolutionStack []tspath.Path, extraFileExtensions []tsoptions.fileExtensionInfo, extendedConfigCache map[tspath.Path]*tsoptions.ExtendedConfigCacheEntry) *tsoptions.ParsedCommandLine
//go:linkname ParseJsonSourceFileConfigFileContent github.com/microsoft/typescript-go/internal/tsoptions.ParseJsonSourceFileConfigFileContent
func ParseJsonSourceFileConfigFileContent(sourceFile *tsoptions.TsConfigSourceFile, host tsoptions.ParseConfigHost, basePath string, existingOptions *core.CompilerOptions, configFileName string, resolutionStack []tspath.Path, extraFileExtensions []tsoptions.fileExtensionInfo, extendedConfigCache map[tspath.Path]*tsoptions.ExtendedConfigCacheEntry) *tsoptions.ParsedCommandLine
//go:linkname ParseListTypeOption github.com/microsoft/typescript-go/internal/tsoptions.ParseListTypeOption
func ParseListTypeOption(opt *tsoptions.CommandLineOption, value string) ([]string, []*ast.Diagnostic)
//go:linkname ParseWatchOptions github.com/microsoft/typescript-go/internal/tsoptions.ParseWatchOptions
func ParseWatchOptions(key string, value any, allOptions *core.WatchOptions) []*ast.Diagnostic
type ParsedCommandLine = tsoptions.ParsedCommandLine
//go:linkname TryReadFile github.com/microsoft/typescript-go/internal/tsoptions.TryReadFile
func TryReadFile(fileName string, readFile func(string) (string, bool), errors []*ast.Diagnostic) (string, []*ast.Diagnostic)
type TsConfigSourceFile = tsoptions.TsConfigSourceFile
var TscBuildOption = tsoptions.TscBuildOption
var WatchNameMap = tsoptions.WatchNameMap
type WildcardMatcher = tsoptions.WildcardMatcher
