From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: auvred <aauvred@gmail.com>
Date: Wed, 26 Mar 2025 16:02:32 +0300
Subject: [PATCH] Disable module name and type reference directive caches in
 compiler.Resolver


diff --git a/internal/compiler/module/resolver.go b/internal/compiler/module/resolver.go
index 0ef1194f6..cafa691b1 100644
--- a/internal/compiler/module/resolver.go
+++ b/internal/compiler/module/resolver.go
@@ -176,7 +176,7 @@ func (r *Resolver) ResolveTypeReferenceDirective(typeReferenceDirectiveName stri
 	}
 
 	containingDirectory := tspath.GetDirectoryPath(containingFile)
-	result, _ := r.typeReferenceDirectiveCache.getFromDirectoryCache(ModeAwareCacheKey{typeReferenceDirectiveName, resolutionMode}, containingDirectory, redirectedReference)
+	var result *ResolvedTypeReferenceDirective
 
 	if result != nil {
 		if traceEnabled {
@@ -201,7 +201,7 @@ func (r *Resolver) ResolveTypeReferenceDirective(typeReferenceDirectiveName stri
 	state := newResolutionState(typeReferenceDirectiveName, containingDirectory, true /*isTypeReferenceDirective*/, resolutionMode, compilerOptions, redirectedReference, r)
 	result = state.resolveTypeReferenceDirective(typeRoots, fromConfig, strings.HasSuffix(containingFile, InferredTypesContainingFile))
 
-	if !r.typeReferenceDirectiveCache.isReadonly {
+	if false {
 		key := ModeAwareCacheKey{typeReferenceDirectiveName, resolutionMode}
 		r.typeReferenceDirectiveCache.setInDirectoryCache(key, containingDirectory, result, redirectedReference)
 		if !tspath.IsExternalModuleNameRelative(typeReferenceDirectiveName) {
@@ -230,7 +230,7 @@ func (r *Resolver) ResolveModuleName(moduleName string, containingFile string, r
 		}
 	}
 	containingDirectory := tspath.GetDirectoryPath(containingFile)
-	result, _ := r.moduleNameCache.getFromDirectoryCache(ModeAwareCacheKey{moduleName, resolutionMode}, containingDirectory, redirectedReference)
+	var result *ResolvedModule
 
 	if result != nil {
 		if traceEnabled {
@@ -257,7 +257,7 @@ func (r *Resolver) ResolveModuleName(moduleName string, containingFile string, r
 			panic(fmt.Sprintf("Unexpected moduleResolution: %d", moduleResolution))
 		}
 
-		if !r.moduleNameCache.isReadonly {
+		if false {
 			key := ModeAwareCacheKey{moduleName, resolutionMode}
 			r.moduleNameCache.setInDirectoryCache(key, containingDirectory, result, redirectedReference)
 			if !tspath.IsExternalModuleNameRelative(moduleName) {
